/*
 * A series of test o run some pipeline configurations. There are several tests,
 * each controlled by setting variable to true.
 *
 * TEST_GATE_STAN_ONLP_PLUS_GATE_NER
 * TEST_GATE_STAN_ONLP_PLUS_ONLP_NER
 * TEST_GATE_STAN_ONLP_PLUS_STAN_NER
 *
 * Test all configurations of Tokenizer, Splitter and Tagger from GATE, Stanford
 * and OpenNLP, followed by the GATE, OpenNLP or Stanford NER (where GATE also
 * includes the Gazetteer. The OpenNLP tools are services at Brandeis, Stanford
 * and GATE tools are services at Vassar.
 *
 * TEST_GATE_STAN
 *
 * Take all configurations of Tokenizer, Splitter, Tagger and NER, using the
 * Stanford and OpenNLP services at Brandeis.
 *
 */


include 'Common';
include 'Services';

import Pipeline;

// Edit these to deermine what tests are used
def TEST_GATE_STAN_ONLP_PLUS_GATE_NER = false;
def TEST_GATE_STAN_ONLP_PLUS_ONLP_NER = false;
def TEST_GATE_STAN_ONLP_PLUS_STAN_NER = false;
def TEST_GATE_STAN = true;


opennlp = services.select('brandeis', 'opennlp');
stanfordb = services.select('brandeis', 'stanford');
stanfordv = services.select('vassar', 'stanford');
gate = services.select('vassar', 'gate');
converters =  services.select('vassar', 'converters');

Data data = new Data(3, read('data/in-01.txt'));
println "\nINPUT:\n" + data.payload;


if (TEST_GATE_STAN_ONLP_PLUS_ONLP_NER) {
    count = 0;
    for (tokenizer in [gate.tokenizer, standfordv.tokenizer, opennlp.tokenizer]) {
        for (splitter in [gate.splitter, standfordv.splitter, opennlp.splitter]) {
            for (tagger in [gate.tagger, standfordv.tagger, opennlp.tagger]) {
                count += 1;
                count_str = count as String;
                p = new Pipeline('hybrid-onlp-' + count_str.padLeft(2, '0'), data, converters);
                p.add_step(tokenizer);
                p.add_step(splitter);
                p.add_step(tagger);
                p.add_step(opennlp.ner);
                p.run(); }}}} 

if (TEST_GATE_STAN_ONLP_PLUS_STAN_NER) {
    count = 0;
    for (tokenizer in [gate.tokenizer, standfordv.tokenizer, opennlp.tokenizer]) {
        for (splitter in [gate.splitter, standfordv.splitter, opennlp.splitter]) {
            for (tagger in [gate.tagger, standfordv.tagger, opennlp.tagger]) {
                count += 1;
                count_str = count as String;
                p = new Pipeline('hybrid-stan-' + count_str.padLeft(2, '0'), data, converters);
                p.add_step(tokenizer);
                p.add_step(splitter);
                p.add_step(tagger);
                p.add_step(standfordv.ner);
                p.run(); }}}}

if (TEST_GATE_STAN_ONLP_PLUS_GATE_NER) {
    count = 0;
    for (tokenizer in [gate.tokenizer, standfordv.tokenizer, opennlp.tokenizer]) {
        for (splitter in [gate.splitter, standfordv.splitter, opennlp.splitter]) {
            for (tagger in [gate.tagger, standfordv.tagger, opennlp.tagger]) {
                count += 1;
                count_str = count as String;
                p = new Pipeline('hybrid-gate-' + count_str.padLeft(2, '0'), data, converters);
                p.add_step(tokenizer);
                p.add_step(splitter);
                p.add_step(tagger);
                p.add_step(gate.gazetteer);
                p.add_step(gate.ner);
                p.run(); }}}}

if (TEST_GATE_STAN) {
    count = 0;
    for (tokenizer in [stanfordb.tokenizer, opennlp.tokenizer]) {
        for (splitter in [stanfordb.splitter, opennlp.splitter]) {
            for (tagger in [stanfordb.tagger, opennlp.tagger]) {
		for (ner in [stanfordb.ner, opennlp.ner]) {
		    count += 1;
		    count_str = count as String;
		    p = new Pipeline('hybrid-onlp-stan-' + count_str.padLeft(2, '0'), data, converters);
		    p.add_step(tokenizer);
		    p.add_step(splitter);
		    p.add_step(tagger);
		    p.add_step(ner);
		    p.run(); }}}}}
